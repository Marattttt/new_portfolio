// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v3.19.6
// source: gorunner.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "multirunner";

export interface RunGoRequest {
  code: string;
}

export interface RunResponse {
  error: string;
  output: string;
}

function createBaseRunGoRequest(): RunGoRequest {
  return { code: "" };
}

export const RunGoRequest = {
  encode(message: RunGoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RunGoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunGoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunGoRequest {
    return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
  },

  toJSON(message: RunGoRequest): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunGoRequest>, I>>(base?: I): RunGoRequest {
    return RunGoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunGoRequest>, I>>(object: I): RunGoRequest {
    const message = createBaseRunGoRequest();
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseRunResponse(): RunResponse {
  return { error: "", output: "" };
}

export const RunResponse = {
  encode(message: RunResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.output !== "") {
      writer.uint32(18).string(message.output);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RunResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.output = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunResponse {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      output: isSet(object.output) ? globalThis.String(object.output) : "",
    };
  },

  toJSON(message: RunResponse): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.output !== "") {
      obj.output = message.output;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RunResponse>, I>>(base?: I): RunResponse {
    return RunResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RunResponse>, I>>(object: I): RunResponse {
    const message = createBaseRunResponse();
    message.error = object.error ?? "";
    message.output = object.output ?? "";
    return message;
  },
};

export type GoRunnerService = typeof GoRunnerService;
export const GoRunnerService = {
  runGo: {
    path: "/multirunner.GoRunner/RunGo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RunGoRequest) => Buffer.from(RunGoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RunGoRequest.decode(value),
    responseSerialize: (value: RunResponse) => Buffer.from(RunResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RunResponse.decode(value),
  },
} as const;

export interface GoRunnerServer extends UntypedServiceImplementation {
  runGo: handleUnaryCall<RunGoRequest, RunResponse>;
}

export interface GoRunnerClient extends Client {
  runGo(request: RunGoRequest, callback: (error: ServiceError | null, response: RunResponse) => void): ClientUnaryCall;
  runGo(
    request: RunGoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RunResponse) => void,
  ): ClientUnaryCall;
  runGo(
    request: RunGoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RunResponse) => void,
  ): ClientUnaryCall;
}

export const GoRunnerClient = makeGenericClientConstructor(GoRunnerService, "multirunner.GoRunner") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GoRunnerClient;
  service: typeof GoRunnerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
