// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: gorunner.proto

package gogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoRunner_RunGo_FullMethodName = "/multirunner.GoRunner/RunGo"
)

// GoRunnerClient is the client API for GoRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoRunnerClient interface {
	RunGo(ctx context.Context, in *RunGoRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type goRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoRunnerClient(cc grpc.ClientConnInterface) GoRunnerClient {
	return &goRunnerClient{cc}
}

func (c *goRunnerClient) RunGo(ctx context.Context, in *RunGoRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, GoRunner_RunGo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoRunnerServer is the server API for GoRunner service.
// All implementations must embed UnimplementedGoRunnerServer
// for forward compatibility
type GoRunnerServer interface {
	RunGo(context.Context, *RunGoRequest) (*RunResponse, error)
	mustEmbedUnimplementedGoRunnerServer()
}

// UnimplementedGoRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedGoRunnerServer struct {
}

func (UnimplementedGoRunnerServer) RunGo(context.Context, *RunGoRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGo not implemented")
}
func (UnimplementedGoRunnerServer) mustEmbedUnimplementedGoRunnerServer() {}

// UnsafeGoRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoRunnerServer will
// result in compilation errors.
type UnsafeGoRunnerServer interface {
	mustEmbedUnimplementedGoRunnerServer()
}

func RegisterGoRunnerServer(s grpc.ServiceRegistrar, srv GoRunnerServer) {
	s.RegisterService(&GoRunner_ServiceDesc, srv)
}

func _GoRunner_RunGo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunGoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRunnerServer).RunGo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoRunner_RunGo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRunnerServer).RunGo(ctx, req.(*RunGoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoRunner_ServiceDesc is the grpc.ServiceDesc for GoRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multirunner.GoRunner",
	HandlerType: (*GoRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunGo",
			Handler:    _GoRunner_RunGo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorunner.proto",
}
